// Setup
SETUP = true

// Container will auto-detect first
// Change here to force
CONTAINER = null

// These can be included in template
// So no need to detect
CELL = cell1
MSG = message1

ctr=0
for i=0; CONTAINER == null; i += 1
  print("Container check: ", i)
  if i == @links
    print("\nReached max links. -> 0")
    i = 0
  end
  
  _link = getlink(i)
  linkType = _link.type
  print("\nLink: ", _link)
  print("\n", linkType)
  CONTAINER = case linkType
  when @core-shard
    print("\nMATCHED shard")
    getlink(i)
  when @core-foundation
    print("\nMATCHED foundation")
    getlink(i)
  when @core-nucleus
    print("\nMATCHED nucleus")
    getlink(i)
  when @vault
    print("\nMATCHED vault")
    getlink(i)
  when @container
    print("\nMATCHED container")
    getlink(i)
  else
    print("\nMATCHED no match")
    null
  end
  print("\nResult:", CONTAINER)
  printflush(MSG)
end

CAP = CONTAINER.sensor(@itemCapacity)
CAP80 = CAP * 0.8
print("Current flag status\n")
print("Flags are at MAX and 80% (P80)\n")
print("------------------------------\n")
print("Blue - Full, MAX and P80 off\n")
print("Yellow - MAX off, P80 on\n")
print("Orange - Have some, MAX and P80 on\n")
print("Red - None present, MAX and P80 on")
printflush(MSG)
clear(0, 0, 0)
drawflush(display1)

CELL[4] = CAP

nLinks = @links

while nLinks == @links
  for _slot0 in 0..15
    slot = _slot0 + 1
    _memSlot = slot + 4
    
    _left = (_slot0 % 8) * 10
    _imgx = _left + 5
    _bottom0 = (_slot0 \ 8) * 40
    _bottom = _bottom0 + 10
    _imgy = _bottom - 5
    
    // Blank current icon for scanning feedback
    color(0, 0, 0, 255)
    rect(_left, _bottom0, 10, 10)
    drawflush(display1)
    
    color(200, 200, 200, 255)
    rect(_left, _bottom - 10, 10, 10)
    color(255, 255, 255, 255)

    // Main switch based on resource
    // Draws the appropriate icon and gets item count
    _count = case _slot0
    when 0
      image(_imgx, _imgy, @copper, 10, 0)
      CONTAINER.copper
    when 1
      image(_imgx, _imgy, @lead, 10, 0)
      CONTAINER.lead
    when 2
      image(_imgx, _imgy, @sand, 10, 0)
      CONTAINER.sand
    when 3
      image(_imgx, _imgy, @coal, 10, 0)
      CONTAINER.coal
    when 4
      image(_imgx, _imgy, @scrap, 10, 0)
      CONTAINER.scrap
    when 5
      image(_imgx, _imgy, @spore-pod, 10, 0)
      CONTAINER.spore-pod
    when 6
      image(_imgx, _imgy, @titanium, 10, 0)
      CONTAINER.titanium
    when 7
      image(_imgx, _imgy, @thorium, 10, 0)
      CONTAINER.thorium
    when 8
      image(_imgx, _imgy, @graphite, 10, 0)
      CONTAINER.graphite
    when 9
      image(_imgx, _imgy, @silicon, 10, 0)
      CONTAINER.silicon
    when 10
      image(_imgx, _imgy, @metaglass, 10, 0)
      CONTAINER.metaglass
    when 11
      image(_imgx, _imgy, @pyratite, 10, 0)
      CONTAINER.pyratite
    when 12
      image(_imgx, _imgy, @blast-compound, 10, 0)
      CONTAINER.blast-compound
    when 13
      image(_imgx, _imgy, @plastanium, 10, 0)
      CONTAINER.plastanium
    when 14
      image(_imgx, _imgy, @phase-fabric, 10, 0)
      CONTAINER.phase-fabric
    when 15
      image(_imgx, _imgy, @surge-alloy, 10, 0)
      CONTAINER.surge-alloy
    end
    
    // See if need to short-circuit
    _exist = CELL[_memSlot]
    
    if SETUP || _exist != _count
      // Update memory cell
      CELL[_memSlot] = _count
      mask = 1 << _slot0
      
      runFull = _count < CAP
      
      maskFull = CELL[0]
      needSwitch = (maskFull & mask) != runFull
      
      if needSwitch
          CELL[0] = maskFull ^ mask //XOR - flip the mask bit
      end
      
      mask80 = CELL[1]
      run80 = _count < (CAP * 0.8)
      needSwitch = (mask80 & mask) != run80
      
      if needSwitch
          CELL[1] = maskFull ^ mask
      end
      
      _tmp = _count * 28
      _tmp2 = _tmp \ CAP
      height = _tmp2 + 2
          
      if run80
        if _count == 0
          color(255, 100, 100, 255)
        else
          color(255, 200, 100, 255)
        end
      else
        if _count == CAP
          color(100, 100, 255, 255)
        else
          color(255, 255, 100, 255)
        end
      end
          
      // Draw. We need to handle the non-covered area as well
      rect(_left, _bottom, 10, height)
      color(100, 100, 100, 255)
      rect(_left, _bottom + height, 10, 30 - height)
    end
    drawflush(display1)
    if slot == 16
      SETUP = false
    end
  end
end
