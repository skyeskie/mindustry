// Make sure states defined
if(STATE_IDLE != 1)
  print("\nSetting state variables")
  STATE_INIT = 0
  STATE_IDLE = 1
  STATE_PICKUP = 2
  STATE_DELIVER = 3
end

// Make sure have unit
while @unit === null
  print("\nBinding flare...")
  UNIT_TYPE = @flare
  FLAG = @x * 10000 + @y
  ubind(UNIT_TYPE)
  flag(FLAG)
  STATE = 0
  printflush(message1)
end

print("STATE: ", STATE)

print("\nDriving: ", @unit, " # ", @unit.flag, "\n")
print("  at (", @unit.x, ", ", @unit.y, ")\n")

// Error state
if(STATE === null || STATE < 0 || STATE > 4)
  // We have a unit, but state is out of bounds
  print("Invalid State: ", STATE)
  printflush(message1)
end

if(STATE == STATE_INIT)
  CONTAINER = container1
  ContX = CONTAINER.x
  ContY = CONTAINER.y

  while found != true
    print("Finding core...")
    printflush(message1)
    found = ulocate(building, core, false, CoreX, CoreY, CORE)
  end
  CAP = CORE.capacity
  STATE = STATE_IDLE
end

print("\nContainer: ", CONTAINER)
print("\nCore: ", CORE)
print("\n at (", CoreX, ", ", CoreY, ")\n")

if(STATE == STATE_IDLE)
  //TODO: Determine next operation
  //Check - what mats have (close to full)
  //Check - what core needs

  MAT = null
  BEST_SCORE = 0
  for(i=0; i<16; i+=1)
    tryMat = case(i)
    when 0
      @copper
    when 1
      @lead
    when 2
      @sand
    end
    
    have = CONTAINER.sensor(tryMat)
    if have > @unit.itemCapacity
      score = (CONTAINER.sensor(MAT) ** 2) * sqrt(1 - (CORE.sensor(MAT) / CAP ))
      if(score > BEST_SCORE)
        BEST_SCORE = score
        MAT = tryMat
      end
    end
  end
  
  if MAT != null
    STATE = STATE_PICKUP
  end
end

if(STATE == STATE_PICKUP)
  if(within(ContX, ContY, 3))
    print("Pickup: ", MAT)
    itemTake(CONTAINER, MAT, @unit.itemCapacity)
    if(@unit.totalItems == @unit.itemCapacity)
      STATE = STATE_DELIVER
    end
  else
    print("Approach container")
    approach(ContX, ContY, 1)
  end
end

if(STATE == STATE_DELIVER)
  if(within(CoreX, CoreY, 3))
    print("Delivering")
    itemDrop(CORE, @unit.itemCapacity)
    if(@unit.totalItems == 0)
      STATE = STATE_IDLE
    end
  else
    print("Approach core")
    approach(CoreX, CoreY, 3)
  end
end

print("\nUnit carrying: ", @unit.totalItems)
print("\nContainer Silicon: ", CONTAINER.silicon)
print("\nCore Silicon: ", CORE.silicon)
printflush(message1)
