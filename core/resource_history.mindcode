

// Large display is 176x176
// Bottom 170x10 is for items + Battery
// Right 6px edge is for power +/-
// Overview gauges from (0, 10) at 176x38
// Main view is from (0, 48) for 178x128

// Large memory cell has 512 spots
// Position 0 for data relating to power scale
// Position 1-4 are for power in, out, battery, battery cap
// Position 5-20 are for item amounts
// Position 70-39 are for the shift amounts for 0-9
// Position 80-49 are for the mask values for 0-9

// Each of 17 values are compressed to range [0-127] (7 bits)
// Max per cell is 64 bits, so can compress 9 per cell
// So could put all operations in 2 cells

// Option 1: Full 176 for history
// Option 2*: Use 170 for history, allow power meter 6 pixels for whole height

// [100 - 270] - Copper, Lead, Sand, Coal, Scrap, Spore, Ti, Thor, Battery
// [300 - 470] - Graph, Silic, Metaglass, Pyratite, Blast, Plast, Phase, Surge

CELL = bank1
allocate heap in CELL[0 ... 50]

if SETUP != 1
  // Configs
  CONTAINER = nucleus1
  POW_LINK = battery1
  DISPLAY = display1
  DISPLAY_CFG = sorter1


  // Constants (for cutting down on temp sets when compiles
  Z = 0
  ONE = 1
  IMG_SIZE = 10
  IMG_Y = 5
  GAUGE_BOTTOM = 12
  DISP_SIZE = 176
  DISP_MID = 88
  FF = 255
  GREY_DARK = 80
  GREY_MID = 127
  GREY_LIGHT = 200
  POWER_METER_LEFT = 170
  POWER_METER_WIDTH = 6

  MAIN_GRAPH_BOTTOM = 46
  GUIDE_01K = MAIN_GRAPH_BOTTOM + 31
  GUIDE_02K = MAIN_GRAPH_BOTTOM + 43
  GUIDE_03K = MAIN_GRAPH_BOTTOM + 53
  GUIDE_04K = MAIN_GRAPH_BOTTOM + 62
  GUIDE_05K = MAIN_GRAPH_BOTTOM + 69
  GUIDE_06K = MAIN_GRAPH_BOTTOM + 76
  GUIDE_07K = MAIN_GRAPH_BOTTOM + 82
  GUIDE_08K = MAIN_GRAPH_BOTTOM + 87
  GUIDE_09K = MAIN_GRAPH_BOTTOM + 93
  GUIDE_10K = MAIN_GRAPH_BOTTOM + 98
  GUIDE_11K = MAIN_GRAPH_BOTTOM + 102
  GUIDE_12K = MAIN_GRAPH_BOTTOM + 107
  GUIDE_13K = MAIN_GRAPH_BOTTOM + 111
  GUIDE_14K = MAIN_GRAPH_BOTTOM + 116
  GUIDE_15K = MAIN_GRAPH_BOTTOM + 120
  GUIDE_16K = MAIN_GRAPH_BOTTOM + 124
  MAIN_GRAPH_HEIGHT = 128
  MAIN_GRAPH_RIGHT = 170

  GUIDE_POW_n7k = MAIN_GRAPH_BOTTOM + 2
  GUIDE_POW_n4k = MAIN_GRAPH_BOTTOM + 6
  GUIDE_POW_n1k = MAIN_GRAPH_BOTTOM + 16
  GUIDE_POW_n700 = MAIN_GRAPH_BOTTOM + 18
  GUIDE_POW_n400 = MAIN_GRAPH_BOTTOM + 22
  GUIDE_POW_n100 = MAIN_GRAPH_BOTTOM + 32
  GUIDE_POW_n70 = MAIN_GRAPH_BOTTOM + 34
  GUIDE_POW_n40 = MAIN_GRAPH_BOTTOM + 38
  GUIDE_POW_n10 = MAIN_GRAPH_BOTTOM + 48
  GUIDE_POW_n7 = MAIN_GRAPH_BOTTOM + 50
  GUIDE_POW_n4 = MAIN_GRAPH_BOTTOM + 54
  GUIDE_POW_MID = MAIN_GRAPH_BOTTOM + 64
  GUIDE_POW_p4 = MAIN_GRAPH_BOTTOM + 74
  GUIDE_POW_p7 = MAIN_GRAPH_BOTTOM + 78
  GUIDE_POW_p10 = MAIN_GRAPH_BOTTOM + 80
  GUIDE_POW_p40 = MAIN_GRAPH_BOTTOM + 90
  GUIDE_POW_p70 = MAIN_GRAPH_BOTTOM + 94
  GUIDE_POW_p100 = MAIN_GRAPH_BOTTOM + 96
  GUIDE_POW_p400 = MAIN_GRAPH_BOTTOM + 106
  GUIDE_POW_p700 = MAIN_GRAPH_BOTTOM + 110
  GUIDE_POW_p1k = MAIN_GRAPH_BOTTOM + 112
  GUIDE_POW_p4k = MAIN_GRAPH_BOTTOM + 122
  GUIDE_POW_p7k = MAIN_GRAPH_BOTTOM + 126
  POW_HEIGHT_FACT = 64 / log10( 10000 )

  // Static values
  CAP = nucleus1.itemCapacity
  capHeightDiv = sqrt(CAP) / MAIN_GRAPH_HEIGHT

  // Init variables
  DISP_SCAN_POS = 0
  $powerMax = 1
  $powDropCtr = 0

  // Generate masks (could hardcode, but more error-prone)
  MASK = 0x7F
  SHIFT = 0
  J = 80
  for I = 70; I < 79; I = I + 1
    CELL[I] = SHIFT
    CELL[J] = MASK
    MASK = MASK << 7
    SHIFT = SHIFT + 7
    J = J + 1
  end

  // Init display
  Z = 0
  clear(DISPLAY, Z, Z, Z)
  color(GREY_DARK, GREY_DARK, GREY_DARK, FF)
  rect(Z, MAIN_GRAPH_BOTTOM, DISP_SIZE, MAIN_GRAPH_HEIGHT)
  rect(Z, Z, DISP_SIZE, IMG_SIZE)
  rect(Z, 12, DISP_SIZE, 32)
  color(GREY_LIGHT, GREY_LIGHT, GREY_LIGHT, FF)
  rect(Z, 44, DISP_SIZE, 2)
  rect(Z, IMG_SIZE, DISP_SIZE, 2)
  rect(Z, 174, DISP_SIZE, 2)
  color(FF, FF, FF, FF)
  IMG_X = 5
  image(IMG_X, IMG_Y, @copper, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @lead, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @sand, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @coal, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @scrap, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @spore-pod, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @titanium, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @thorium, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @graphite, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @silicon, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @metaglass, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @pyratite, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @blast-compound, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @plastanium, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @phase-fabric, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @surge-alloy, IMG_SIZE, Z)
  IMG_X += IMG_SIZE
  image(IMG_X, IMG_Y, @battery, IMG_SIZE, Z)
  drawflush(DISPLAY)
  SETUP = 1
else
  //TODO: Blank scan line that we're currently processing
  color(Z, Z, Z, FF)
  rect(DISP_SCAN_POS, 46, ONE, 128)
  drawflush(DISPLAY)

  //Main sensor section
  powGen = POW_LINK.powerNetIn
  $powGen = powGen
  powUse = POW_LINK.powerNetOut
  $powUse = powUse
  powStore = POW_LINK.powerNetStored
  $powStore = powStore
  capStore = POW_LINK.powerNetCapacity
  $capStore = capStore
  copper = CONTAINER.copper
  $copper = copper
  lead = CONTAINER.lead
  $lead = lead
  sand = CONTAINER.sand
  $sand = sand
  coal = CONTAINER.coal
  $coal = coal
  scrap = CONTAINER.scrap
  $scrap = scrap
  spore = CONTAINER.spore-pod
  $spore = spore
  titan = CONTAINER.titanium
  $titan = titan
  thor = CONTAINER.thorium
  $thor = thor
  graph = CONTAINER.graphite
  $graph = graph
  silic = CONTAINER.silicon
  $silic = silic
  glass = CONTAINER.metaglass
  $glass = glass
  pyra = CONTAINER.pyratite
  $pyra = pyra
  blast = CONTAINER.blast-compound
  $blast = blast
  plast = CONTAINER.plastanium
  $plast = plast
  phase = CONTAINER.phase-fabric
  $phase = phase
  surge = CONTAINER.surge-alloy
  $surge = surge


  // Position 70-39 are for the shift amounts for 0-9
  // Position 80-49 are for the mask values for 0-9
  // [100 - 270] - Copper, Lead, Sand, Coal, Scrap, Spore, Ti, Thor, Battery
  // [300 - 470] - Graph, Silic, Metaglass, Pyratite, Blast, Plast, Phase, Surge

  //Calculate heights
  hCopper = sqrt(copper) \ capHeightDiv
  hLead = sqrt(lead) \ capHeightDiv
  hSand = sqrt(sand) \ capHeightDiv
  hCoal = sqrt(coal) \ capHeightDiv
  hScrap = sqrt(scrap) \ capHeightDiv
  hSpore = sqrt(spore) \ capHeightDiv
  hTitan = sqrt(titan) \ capHeightDiv
  hThor = sqrt(thor) \ capHeightDiv
  hGraph = sqrt(graph) \ capHeightDiv
  hSilic = sqrt(silic) \ capHeightDiv
  hGlass = sqrt(glass) \ capHeightDiv
  hPyra = sqrt(pyra) \ capHeightDiv
  hBlast = sqrt(blast) \ capHeightDiv
  hPlast = sqrt(plast) \ capHeightDiv
  hPhase = sqrt(phase) \ capHeightDiv
  hSurge = sqrt(surge) \ capHeightDiv

  hBatt = (sqrt( powStore ) * MAIN_GRAPH_HEIGHT) \ sqrt( capStore )

  netPow = powGen - powUse
  powMax = abs(netPow) * 1.1 //TODO: Need to store info to make this more stable

  if powMax >= $powerMax
    $powerDropCtr = 0
    if powMax > $powerMax
      $powerMax = powMax
    end
  else
    if $powerDropCtr > DISP_SIZE
      $powerDropCtr = 0
      $powerMax = powMax
    else
      $powerDropCtr += 1
      powMax = $powerMax
    end
  end

  hPow = if netPow == 0
    64
  else
    absNetPow = abs(netPow)
    powSign = netPow / absNetPow
    hPowBar = log10( absNetPow ) * POW_HEIGHT_FACT
    64 + powSign * hPowBar
  end

  //Bottom graphs
  //TODO: Coloring for bottom graphs
  LEFT = Z
  color(GREY_DARK, GREY_DARK, GREY_DARK, FF)
  rect(LEFT, GAUGE_BOTTOM, DISP_SIZE, 32)
  color(FF - hCopper, GREY_MID + hCopper, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hCopper \ 4)
  LEFT += IMG_SIZE
  color(FF - hLead, GREY_MID + hLead, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hLead \ 4)
  LEFT += IMG_SIZE
  color(FF - hSand, GREY_MID + hSand, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hSand \ 4)
  LEFT += IMG_SIZE
  color(FF - hCoal, GREY_MID + hCoal, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hCoal \ 4)
  LEFT += IMG_SIZE
  color(FF - hScrap, GREY_MID + hScrap, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hScrap \ 4)
  LEFT += IMG_SIZE
  color(FF - hSpore, GREY_MID + hSpore, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hSpore \ 4)
  LEFT += IMG_SIZE
  color(FF - hTitan, GREY_MID + hTitan, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hTitan \ 4)
  LEFT += IMG_SIZE
  color(FF - hThor, GREY_MID + hThor, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hThor \ 4)
  LEFT += IMG_SIZE
  color(FF - hGraph, GREY_MID + hGraph, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hGraph \ 4)
  LEFT += IMG_SIZE
  color(FF - hSilic, GREY_MID + hSilic, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hSilic \ 4)
  LEFT += IMG_SIZE
  color(FF - hGlass, GREY_MID + hGlass, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hGlass \ 4)
  LEFT += IMG_SIZE
  color(FF - hPyra, GREY_MID + hPyra, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hPyra \ 4)
  LEFT += IMG_SIZE
  color(FF - hBlast, GREY_MID + hBlast, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hBlast \ 4)
  LEFT += IMG_SIZE
  color(FF - hPlast, GREY_MID + hPlast, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hPlast \ 4)
  LEFT += IMG_SIZE
  color(FF - hPhase, GREY_MID + hPhase, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hPhase \ 4)
  LEFT += IMG_SIZE
  color(FF - hSurge, GREY_MID + hSurge, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hSurge \ 4)
  LEFT += IMG_SIZE
  color(FF - hBatt, GREY_MID + hBatt, GREY_MID, FF)
  rect(LEFT, GAUGE_BOTTOM, IMG_SIZE, hBatt \ 4)
  drawflush(DISPLAY)

  color(Z, Z, Z, FF)
  rect(POWER_METER_LEFT, GAUGE_BOTTOM, POWER_METER_WIDTH, DISP_SIZE)
  if hPow < DISP_MID
    color(FF, Z, Z, FF)
    rect(POWER_METER_LEFT, hPow, POWER_METER_WIDTH, (DISP_MID - hPow))
  else
    color(Z, FF, Z, FF)
    rect(POWER_METER_LEFT, 88, POWER_METER_WIDTH, max(hPow - DISP_MID, 1))
  end

  drawflush(DISPLAY)

  enc1a = (hCopper << CELL[70]) + (hLead << CELL[71]) + (hSand << CELL[72]) + (hCoal << CELL[73]) + (hScrap << CELL[74])
  enc1b = (hSpore << CELL[75]) + (hTitan << CELL[76]) + (hThor << CELL[77]) + (hBatt << CELL[78])

  enc2a = (hGraph << CELL[70]) + (hSilic << CELL[71]) + (hGlass << CELL[72]) + (hPyra << CELL[73]) + (hBlast << CELL[74])
  enc2b = (hPlast << CELL[75]) + (hPhase << CELL[76]) + (hSurge << CELL[77]) + (hPow << CELL[78])
  
  CELL[DISP_SCAN_POS + 100] = enc1a + enc1b
  CELL[DISP_SCAN_POS + 300] = enc2a + enc2b
  
  //TODO: Determine active graph from sorter
  displayCfgVal = DISPLAY_CFG.config
  LINE_HEIGHT = case displayCfgVal
  when @copper
    hCopper
  when @lead
    hLead
  when @sand
    hSand
  when @coal
    hCoal
  when @scrap
    hScrap
  when @spore-pod
    hSpore
  when @titanium
    hTitan
  when @thorium
    hThor
  when @graphite
    hGraph
  when @silicon
    hSilic
  when @metaglass
    hGlass
  when @pyratite
    hPyra
  when @blast-compound
    hBlast
  when @plastinium
    hPlast
  when @phase-fabric
    hPhase
  when @surge-alloy
    hSurge
  else
    hPow
  end


  //TODO: Load history to display if sorter config changed
  
  // Draw grey background
  color(GREY_DARK, GREY_DARK, GREY_DARK, FF)
  rect(DISP_SCAN_POS, MAIN_GRAPH_BOTTOM, ONE, MAIN_GRAPH_HEIGHT)

  if displayCfgVal == null
    // Power
    color(Z, GREY_DARK, GREY_MID, FF)
    line(Z, GUIDE_POW_n7k, MAIN_GRAPH_RIGHT, GUIDE_POW_n7k)
    line(Z, GUIDE_POW_n4k, MAIN_GRAPH_RIGHT, GUIDE_POW_n4k)
    line(Z, GUIDE_POW_n700, MAIN_GRAPH_RIGHT, GUIDE_POW_n700)
    line(Z, GUIDE_POW_n400, MAIN_GRAPH_RIGHT, GUIDE_POW_n400)
    line(Z, GUIDE_POW_n70, MAIN_GRAPH_RIGHT, GUIDE_POW_n70)
    line(Z, GUIDE_POW_n40, MAIN_GRAPH_RIGHT, GUIDE_POW_n40)
    line(Z, GUIDE_POW_n7, MAIN_GRAPH_RIGHT, GUIDE_POW_n7)
    line(Z, GUIDE_POW_n4, MAIN_GRAPH_RIGHT, GUIDE_POW_n4)
    line(Z, GUIDE_POW_p7k, MAIN_GRAPH_RIGHT, GUIDE_POW_p7k)
    line(Z, GUIDE_POW_p4k, MAIN_GRAPH_RIGHT, GUIDE_POW_p4k)
    line(Z, GUIDE_POW_p700, MAIN_GRAPH_RIGHT, GUIDE_POW_p700)
    line(Z, GUIDE_POW_p400, MAIN_GRAPH_RIGHT, GUIDE_POW_p400)
    line(Z, GUIDE_POW_p70, MAIN_GRAPH_RIGHT, GUIDE_POW_p70)
    line(Z, GUIDE_POW_p40, MAIN_GRAPH_RIGHT, GUIDE_POW_p40)
    line(Z, GUIDE_POW_p7, MAIN_GRAPH_RIGHT, GUIDE_POW_p7)
    line(Z, GUIDE_POW_p4, MAIN_GRAPH_RIGHT, GUIDE_POW_p4)
    color(GREY_DARK, GREY_MID, GREY_LIGHT, FF)
    line(Z, GUIDE_POW_n1k, MAIN_GRAPH_RIGHT, GUIDE_POW_n1k)
    line(Z, GUIDE_POW_n100, MAIN_GRAPH_RIGHT, GUIDE_POW_n100)
    line(Z, GUIDE_POW_n10, MAIN_GRAPH_RIGHT, GUIDE_POW_n10)
    line(Z, GUIDE_POW_p1k, MAIN_GRAPH_RIGHT, GUIDE_POW_p1k)
    line(Z, GUIDE_POW_p100, MAIN_GRAPH_RIGHT, GUIDE_POW_p100)
    line(Z, GUIDE_POW_p10, MAIN_GRAPH_RIGHT, GUIDE_POW_p10)
    color(FF, FF, FF, FF)
    line(Z, GUIDE_POW_MID, MAIN_GRAPH_RIGHT, GUIDE_POW_MID)

    if hPow < 64
      color(FF, Z, Z, FF)
    else
      color(Z, FF, Z, FF)
    end

    line(DISP_SCAN_POS, 64 + MAIN_GRAPH_BOTTOM, DISP_SCAN_POS, hPow + MAIN_GRAPH_BOTTOM)
  else
    // Draw value
    color(Z, GREY_MID, GREY_LIGHT, FF)
    rect(DISP_SCAN_POS, MAIN_GRAPH_BOTTOM, ONE, LINE_HEIGHT)

    // Draw grid lines
    color(Z, GREY_DARK, GREY_MID, FF)
    line(Z, GUIDE_01K, MAIN_GRAPH_RIGHT, GUIDE_01K)
    line(Z, GUIDE_02K, MAIN_GRAPH_RIGHT, GUIDE_02K)
    line(Z, GUIDE_03K, MAIN_GRAPH_RIGHT, GUIDE_03K)
    line(Z, GUIDE_04K, MAIN_GRAPH_RIGHT, GUIDE_04K)
    line(Z, GUIDE_05K, MAIN_GRAPH_RIGHT, GUIDE_05K)
    line(Z, GUIDE_06K, MAIN_GRAPH_RIGHT, GUIDE_06K)
    line(Z, GUIDE_07K, MAIN_GRAPH_RIGHT, GUIDE_07K)
    line(Z, GUIDE_08K, MAIN_GRAPH_RIGHT, GUIDE_08K)
    line(Z, GUIDE_09K, MAIN_GRAPH_RIGHT, GUIDE_09K)
    line(Z, GUIDE_10K, MAIN_GRAPH_RIGHT, GUIDE_10K)
    line(Z, GUIDE_11K, MAIN_GRAPH_RIGHT, GUIDE_11K)
    line(Z, GUIDE_12K, MAIN_GRAPH_RIGHT, GUIDE_12K)
    line(Z, GUIDE_13K, MAIN_GRAPH_RIGHT, GUIDE_13K)
    line(Z, GUIDE_14K, MAIN_GRAPH_RIGHT, GUIDE_14K)
    line(Z, GUIDE_15K, MAIN_GRAPH_RIGHT, GUIDE_15K)
    line(Z, GUIDE_16K, MAIN_GRAPH_RIGHT, GUIDE_16K)
  end
  // Draw top line
  color(Z, Z, FF, FF)
  rect(DISP_SCAN_POS, MAIN_GRAPH_BOTTOM + LINE_HEIGHT, ONE, ONE)


  // Draw top
  color(GREY_LIGHT, GREY_LIGHT, FF, FF)
  rect(DISP_SCAN_POS, MAIN_GRAPH_BOTTOM + LINE_HEIGHT, ONE, ONE)

  drawflush(DISPLAY)
  
  DISP_SCAN_POS = ( DISP_SCAN_POS + 1) % 170 
end
